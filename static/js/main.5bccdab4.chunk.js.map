{"version":3,"sources":["components/home/TextLInk.js","components/home/TypedText.js","components/home/Home.js","screens/Home.js","App.js","serviceWorker.js","index.js"],"names":["TextLink","_ref","text","to","react_default","a","createElement","href","className","TypedText","options","startDelay","strings","this","props","typeSpeed","backSpeed","backDelay","loop","typed","Typed","el","destroy","_this","Object","assign","style","whiteSpace","ref","Component","Home","minHeight","display","alignItems","justifyContent","maxWidth","fontSize","dist","home_TypedText","marginTop","margin","concat","TextLInk","HomeScreen","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","home_Home","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SAceA,SAVE,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,GACxB,OACEC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAMJ,EAAIK,UAAU,YACpBN,uBC8BMO,8LAjCO,IAEZC,EAAU,CACdC,WAAY,IACZC,QAHkBC,KAAKC,MAAjBF,QAING,UAAW,GACXC,UAAW,GACXC,UAAW,KACXC,MAAM,GAERL,KAAKM,MAAQ,IAAIC,IAAMP,KAAKQ,GAAIX,kDAIhCG,KAAKM,MAAMG,2CAGJ,IAAAC,EAAAV,KACP,OACET,EAAAC,EAAAC,cAAA,MAAAkB,OAAAC,OAAA,CAAKjB,UAAU,aAAgBK,KAAKC,OAClCV,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QACEoB,MAAO,CAAEC,WAAY,OACrBC,IAAK,SAAAP,GACHE,EAAKF,GAAKA,cAzBAQ,aCiGTC,EA/FF,SAAA7B,GAAeA,EAAZa,MAGd,OACEV,EAAAC,EAAAC,cAAA,OACEoB,MAAO,CACLK,UAAW,QACXC,QAAS,OACTC,WAAY,SACZC,eAAgB,WAGlB9B,EAAAC,EAAAC,cAAA,OACEoB,MAAO,CACLS,SAAU,UAGZ/B,EAAAC,EAAAC,cAAA,MACEoB,MAAO,CACLU,SAAU,UAGZhC,EAAAC,EAAAC,cAAC+B,EAAA,YAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,CACE1B,QAAS,CAAC,gCACVc,MAAO,CACLU,SAAU,WAIhBhC,EAAAC,EAAAC,cAAC+B,EAAA,WAAD,sCAGFjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mFAKAF,EAAAC,EAAAC,cAAA,kXASAF,EAAAC,EAAAC,cAAA,8HAKAF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,OACEoB,MAAO,CACLa,UAAW,WAGbnC,EAAAC,EAAAC,cAAA,QACEoB,MAAO,CACLc,OAAM,KAAAC,OA5DK,QA4DL,UAGRrC,EAAAC,EAAAC,cAACoC,EAAD,CACExC,KAAK,WACLC,GAAG,uCAZT,IAgBEC,EAAAC,EAAAC,cAAA,QACEoB,MAAO,CACLc,OAAM,KAAAC,OAvEK,WA0EbrC,EAAAC,EAAAC,cAACoC,EAAD,CACExC,KAAK,WACLC,GAAG,yCAvBT,IA2BEC,EAAAC,EAAAC,cAAA,QACEoB,MAAO,CACLc,OAAM,KAAAC,OAlFK,WAqFbrC,EAAAC,EAAAC,cAACoC,EAAD,CAAUxC,KAAK,SAASC,GAAG,0CC7E1BwC,cATb,SAAAA,EAAY7B,GAAQ,OAAAU,OAAAoB,EAAA,EAAApB,CAAAX,KAAA8B,GAAAnB,OAAAqB,EAAA,EAAArB,CAAAX,KAAAW,OAAAsB,EAAA,EAAAtB,CAAAmB,GAAAI,KAAAlC,KACZC,0EAIN,OAAOV,EAAAC,EAAAC,cAAC0C,EAAD,aANcnB,mBCkBVoB,MAjBf,WACE,OACE7C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAElBJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KACE9C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,QCDvBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAQC,SAAUC,IAChB3D,EAAAC,EAAAC,cAAC0D,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5bccdab4.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./TextLink.css\";\n\nconst TextLink = ({ text, to }) => {\n  return (\n    <span>\n      <a href={to} className=\"textLink\">\n        {text}\n      </a>\n    </span>\n  );\n};\n\nexport default TextLink;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Typed from \"typed.js\";\n\nclass TypedText extends Component {\n  componentDidMount() {\n    const { strings } = this.props;\n    const options = {\n      startDelay: 350,\n      strings: strings,\n      typeSpeed: 20,\n      backSpeed: 20,\n      backDelay: 1200,\n      loop: false\n    };\n    this.typed = new Typed(this.el, options);\n  }\n\n  componentWillUnmount() {\n    this.typed.destroy();\n  }\n\n  render() {\n    return (\n      <div className=\"type-wrap\" {...this.props}>\n        <h2>\n          <span\n            style={{ whiteSpace: \"pre\" }}\n            ref={el => {\n              this.el = el;\n            }}\n          />\n        </h2>\n      </div>\n    );\n  }\n}\n\nexport default TypedText;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { BrowserView, MobileView } from \"react-device-detect\";\nimport TextLink from \"./TextLInk\";\nimport TypedText from \"./TypedText\";\n\nconst Home = ({ props }) => {\n  const linkSpacePadding = \"1.2em\";\n\n  return (\n    <div\n      style={{\n        minHeight: \"100vh\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }}\n    >\n      <div\n        style={{\n          maxWidth: \"700px\"\n        }}\n      >\n        <h1\n          style={{\n            fontSize: \"1.8em\"\n          }}\n        >\n          <BrowserView>\n            <TypedText\n              strings={[\"Hello! My name is Joel Tong.\"]}\n              style={{\n                fontSize: \".8em\"\n              }}\n            />\n          </BrowserView>\n          <MobileView>Hello! My name is Joel Tong.</MobileView>\n        </h1>\n\n        <div>\n          <p>\n            I love exploring ideas and hail from the aviation and travel\n            industry.\n          </p>\n\n          <p>\n            Having coded since age 10, my passion lies in bringing ideas\n            together with code. My experience includes being part of Facebook\n            App Academy @ Facebook HQ Menlo Park, where I worked on the MIT App\n            Inventor 2 open-source codebase for course credit by Facebook, to\n            build a game creator, and winning second at the Singapore Airlines\n            App Challenge Hackathon 2015.\n          </p>\n\n          <p>\n            I am keenly passionate about pro-bono work, connecting with people,\n            tinkering with new ideas, travel and history.\n          </p>\n\n          <p>Let's have a chat if you're keen! (:</p>\n          <div\n            style={{\n              marginTop: \"5.2rem\"\n            }}\n          >\n            <span\n              style={{\n                margin: `0 ${linkSpacePadding} 0 0`\n              }}\n            >\n              <TextLink\n                text=\"Facebook\"\n                to=\"https://www.facebook.com/joeltong\"\n              />\n            </span>\n            |\n            <span\n              style={{\n                margin: `0 ${linkSpacePadding}`\n              }}\n            >\n              <TextLink\n                text=\"LinkedIn\"\n                to=\"https://www.linkedin.com/in/jhtong/\"\n              />\n            </span>\n            |\n            <span\n              style={{\n                margin: `0 ${linkSpacePadding}`\n              }}\n            >\n              <TextLink text=\"GitHub\" to=\"https://github.com/myrtleTree33\" />\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Home from \"../components/home/Home\";\n\nclass HomeScreen extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return <Home />;\n  }\n}\n\nexport default HomeScreen;\n","import React from \"react\";\nimport { Link, Switch, Route, Redirect, withRouter } from \"react-router-dom\";\n\nimport HomeScreen from \"./screens/Home\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">{/* <Link to=\"/\">Home</Link> */}</header>\n\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={HomeScreen} />\n          {/* <Route path=\"/profile/:login\" component={ProfileScreen} />\n          <Route path=\"/account\" component={AccountScreen} />\n          <Route path=\"/logout\" component={LogoutScreen} /> */}\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}